import timetry:    import urllib.urequest as urllibreqexcept:    import urllib.request as urllibreqdef GetStartTimes2(hour):    data = {}    data['language'] = 'de'    data['commonMacro'] = 'true'    data['name_origin'] = '2000124'    data['type_origin'] = 'any'    data['nameInput_origin'] = '2000124'    data['type_destination'] = 'any'    data['nameInput_destination'] = '2000276'    data['itdTripDateTimeDepArr'] = 'dep'    data['itdTimeHour'] = '{0}'.format(hour)    data['itdLPxx_version'] = 'text'    data['routeType'] = 'LEASTWALKING'    url = 'http://efa.avv-augsburg.de/avv2/XSLT_TRIP_REQUEST2'    url_parameter = '&'.join(['{}={}'.format(k, v) for k, v in data.items()])    full_url = url + '?' + url_parameter    data = urllibreq.urlopen(full_url).read().decode('UTF-8')    # find times in string    p = []    f = r'Die Abfahrt ist um '    pos = data.find(f)    while pos is not -1:        p.append(data[pos + len(f): pos + len(f) + 5])        pos = data.find(f, pos + 1)    return pdef get_minutes(actualTime, t0):    # Get first item and get diff time with modulo calculation    minutes_actualTime = actualTime[3] * 60 + actualTime[4]    minutes_time = int(t0[0:2]) * 60 + int(t0[3:5])    minutes = (minutes_time - minutes_actualTime) % (60 * 24)    return minutesdef clean_times(actualTime, times):    if times:        # Get first item and get diff time with modulo calculation        # Remove all times smaller than actual time        actualmin = actualTime[3] * 60 + actualTime[4]        for index, ti in enumerate(times):            tmin = int(ti[0:2]) * 60 + int(ti[3:5])            if ((tmin - actualmin) % 1440) > 600:                del times[index]    return timesdef get_times():        # Get actual time and get request from web page        atime = time.localtime()        ti = GetStartTimes2(atime[3])        # Remove all times smaller than actual time        return clean_times(atime, ti)if __name__ == "__main__":    # Show window    print('wait...')    # Get actual hour and get data from web page    actualTime = time.localtime()    times = GetStartTimes2(actualTime[3])    if times:        # Renew time        actualTime = time.localtime()        # Remove all times smaller than actual time        times = clean_times(actualTime, times)        minutes = get_minutes(actualTime, times[0])        # Prepare print data        text = 'Minutes to wait : {0}\n'.format(minutes)        for t in times:            text = text + '--> {0}\n'.format(t)        # Write data to text window        print(text)    else:        print('No times received')